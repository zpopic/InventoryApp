// <auto-generated />
using System;
using InventoryApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InventoryApp.Migrations
{
    [DbContext(typeof(inventoryContext))]
    [Migration("20200818170121_PocetnaMigra1")]
    partial class PocetnaMigra1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("InventoryApp.Models.Artikl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned");

                    b.Property<int?>("AktualnoStanje")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("aktualno_stanje")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Ident")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ident")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int>("IzvedbaId")
                        .HasColumnName("izvedba_Id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("KategorijaId")
                        .HasColumnName("kategorija_Id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int?>("PocetnoStanje")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pocetno_stanje")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int>("TipId")
                        .HasColumnName("tip_Id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("UsrChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_changed")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int>("VrstaId")
                        .HasColumnName("vrsta_Id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int?>("ZavrsnoStanje")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("zavrsno_stanje")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("IzvedbaId")
                        .HasName("fk_artikl1_idx");

                    b.HasIndex("KategorijaId")
                        .HasName("fk_artikl4_idx");

                    b.HasIndex("TipId")
                        .HasName("fk_artikl2_idx");

                    b.HasIndex("VrstaId")
                        .HasName("fk_artikl3_idx");

                    b.ToTable("artikl");

                    b.HasComment("					");
                });

            modelBuilder.Entity("InventoryApp.Models.ArtiklAudit", b =>
                {
                    b.Property<int?>("AktualnoStanje")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("aktualno_stanje")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("ChangeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("change_type")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("EditTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("edit_time")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("PocetnoStanje")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pocetno_stanje")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("UsrChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_changed")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int?>("ZavrsnoStanje")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("zavrsno_stanje")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.ToTable("artikl_audit");
                });

            modelBuilder.Entity("InventoryApp.Models.Aspnetroleclaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ClaimType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("ClaimValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .HasName("IX_AspNetRoleClaims_RoleId");

                    b.ToTable("aspnetroleclaims");
                });

            modelBuilder.Entity("InventoryApp.Models.Aspnetroles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("ConcurrencyStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("NormalizedName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("aspnetroles");
                });

            modelBuilder.Entity("InventoryApp.Models.Aspnetuserclaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ClaimType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("ClaimValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("IX_AspNetUserClaims_UserId1");

                    b.ToTable("aspnetuserclaims");
                });

            modelBuilder.Entity("InventoryApp.Models.Aspnetuserlogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("ProviderDisplayName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId")
                        .HasName("IX_AspNetUserLogins_UserId");

                    b.ToTable("aspnetuserlogins");
                });

            modelBuilder.Entity("InventoryApp.Models.Aspnetuserroles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY");

                    b.HasIndex("RoleId")
                        .HasName("IX_AspNetUserRoles_RoleId");

                    b.ToTable("aspnetuserroles");
                });

            modelBuilder.Entity("InventoryApp.Models.Aspnetusers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int(11)");

                    b.Property<string>("ConcurrencyStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<short>("EmailConfirmed")
                        .HasColumnType("bit(1)");

                    b.Property<short>("LockoutEnabled")
                        .HasColumnType("bit(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("NormalizedEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("NormalizedUserName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("PasswordHash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("PhoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<short>("PhoneNumberConfirmed")
                        .HasColumnType("bit(1)");

                    b.Property<string>("SecurityStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<short>("TwoFactorEnabled")
                        .HasColumnType("bit(1)");

                    b.Property<string>("UserName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("aspnetusers");
                });

            modelBuilder.Entity("InventoryApp.Models.Aspnetusertokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PRIMARY");

                    b.ToTable("aspnetusertokens");
                });

            modelBuilder.Entity("InventoryApp.Models.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory");
                });

            modelBuilder.Entity("InventoryApp.Models.Izvedba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("KategorijaId")
                        .HasColumnName("kategorija_Id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnName("naziv")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Opis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("opis")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int>("TipId")
                        .HasColumnName("tip_Id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("UsrChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_changed")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int>("VrstaId")
                        .HasColumnName("vrsta_Id")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("KategorijaId")
                        .HasName("fk_izvedba3_idx");

                    b.HasIndex("TipId")
                        .HasName("fk_izvedba1_idx");

                    b.HasIndex("VrstaId")
                        .HasName("fk_izvedba2_idx");

                    b.ToTable("izvedba");
                });

            modelBuilder.Entity("InventoryApp.Models.IzvedbaAudit", b =>
                {
                    b.Property<string>("ChangeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("change_type")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("EditTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("edit_time")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Naziv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("naziv")
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Opis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("opis")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("UsrChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_changed")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.ToTable("izvedba_audit");
                });

            modelBuilder.Entity("InventoryApp.Models.Kategorija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnName("naziv")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Opis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("opis")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("UsrChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_changed")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("kategorija");
                });

            modelBuilder.Entity("InventoryApp.Models.KategorijaAudit", b =>
                {
                    b.Property<string>("ChangeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("change_type")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("EditTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("edit_time")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Naziv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("naziv")
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Opis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("opis")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("UsrChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_changed")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.ToTable("kategorija_audit");
                });

            modelBuilder.Entity("InventoryApp.Models.Skladiste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Opis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("opis")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("UsrChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_changed")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("skladiste");
                });

            modelBuilder.Entity("InventoryApp.Models.SkladisteAudit", b =>
                {
                    b.Property<string>("ChangeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("change_type")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("EditTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("edit_time")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Naziv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("naziv")
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Opis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("opis")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("UsrChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_changed")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.ToTable("skladiste_audit");
                });

            modelBuilder.Entity("InventoryApp.Models.Tip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("KategorijaId")
                        .HasColumnName("kategorija_Id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnName("naziv")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Opis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("opis")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("UsrChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_changed")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int>("VrstaId")
                        .HasColumnName("vrsta_Id")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("KategorijaId")
                        .HasName("fk_tip2_idx");

                    b.HasIndex("VrstaId")
                        .HasName("fk_tip1_idx");

                    b.ToTable("tip");
                });

            modelBuilder.Entity("InventoryApp.Models.TipAudit", b =>
                {
                    b.Property<string>("ChangeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("change_type")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("EditTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("edit_time")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Naziv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("naziv")
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Opis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("opis")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("UsrChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_changed")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.ToTable("tip_audit");
                });

            modelBuilder.Entity("InventoryApp.Models.Vrsta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("KategorijaId")
                        .HasColumnName("kategorija_Id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnName("naziv")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Opis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("opis")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("UsrChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_changed")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("KategorijaId")
                        .HasName("fk_vrsta_kategorija1_idx");

                    b.ToTable("vrsta");
                });

            modelBuilder.Entity("InventoryApp.Models.VrstaAudit", b =>
                {
                    b.Property<string>("ChangeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("change_type")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("EditTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("edit_time")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Naziv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("naziv")
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Opis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("opis")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("UsrChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_changed")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.ToTable("vrsta_audit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .HasName("IX_AspNetRoleClaims_RoleId1");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId")
                        .HasName("IX_AspNetUserLogins_UserId1");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasName("IX_AspNetUserRoles_RoleId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InventoryApp.Models.Artikl", b =>
                {
                    b.HasOne("InventoryApp.Models.Izvedba", "Izvedba")
                        .WithMany("Artikl")
                        .HasForeignKey("IzvedbaId")
                        .HasConstraintName("fk_artikl1")
                        .IsRequired();

                    b.HasOne("InventoryApp.Models.Kategorija", "Kategorija")
                        .WithMany("Artikl")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("fk_artikl4")
                        .IsRequired();

                    b.HasOne("InventoryApp.Models.Tip", "Tip")
                        .WithMany("Artikl")
                        .HasForeignKey("TipId")
                        .HasConstraintName("fk_artikl2")
                        .IsRequired();

                    b.HasOne("InventoryApp.Models.Vrsta", "Vrsta")
                        .WithMany("Artikl")
                        .HasForeignKey("VrstaId")
                        .HasConstraintName("fk_artikl3")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryApp.Models.Aspnetroleclaims", b =>
                {
                    b.HasOne("InventoryApp.Models.Aspnetroles", "Role")
                        .WithMany("Aspnetroleclaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryApp.Models.Aspnetuserclaims", b =>
                {
                    b.HasOne("InventoryApp.Models.Aspnetusers", "User")
                        .WithMany("Aspnetuserclaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserClaims_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryApp.Models.Aspnetuserlogins", b =>
                {
                    b.HasOne("InventoryApp.Models.Aspnetusers", "User")
                        .WithMany("Aspnetuserlogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserLogins_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryApp.Models.Aspnetuserroles", b =>
                {
                    b.HasOne("InventoryApp.Models.Aspnetroles", "Role")
                        .WithMany("Aspnetuserroles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryApp.Models.Aspnetusers", "User")
                        .WithMany("Aspnetuserroles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryApp.Models.Aspnetusertokens", b =>
                {
                    b.HasOne("InventoryApp.Models.Aspnetusers", "User")
                        .WithMany("Aspnetusertokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserTokens_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryApp.Models.Izvedba", b =>
                {
                    b.HasOne("InventoryApp.Models.Kategorija", "Kategorija")
                        .WithMany("Izvedba")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("fk_izvedba3")
                        .IsRequired();

                    b.HasOne("InventoryApp.Models.Tip", "Tip")
                        .WithMany("Izvedba")
                        .HasForeignKey("TipId")
                        .HasConstraintName("fk_izvedba1")
                        .IsRequired();

                    b.HasOne("InventoryApp.Models.Vrsta", "Vrsta")
                        .WithMany("Izvedba")
                        .HasForeignKey("VrstaId")
                        .HasConstraintName("fk_izvedba2")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryApp.Models.Tip", b =>
                {
                    b.HasOne("InventoryApp.Models.Kategorija", "Kategorija")
                        .WithMany("Tip")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("fk_tip2")
                        .IsRequired();

                    b.HasOne("InventoryApp.Models.Vrsta", "Vrsta")
                        .WithMany("Tip")
                        .HasForeignKey("VrstaId")
                        .HasConstraintName("fk_tip1")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryApp.Models.Vrsta", b =>
                {
                    b.HasOne("InventoryApp.Models.Kategorija", "Kategorija")
                        .WithMany("Vrsta")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("fk_vrsta_kategorija1")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
